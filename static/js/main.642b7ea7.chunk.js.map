{"version":3,"sources":["assests/plant2.svg","firebase.js","hooks/useUserInputTracking.js","helpers/sluggify.js","components/AddAPlant.js","hooks/usePlantList.js","components/PlantList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storageRef","storage","ref","dbRef","database","useUserInputTracking","pieceOState","useState","userInput","setUserInput","handleUserInput","newInput","name","noSpaces","replace","split","firstLetter","shift","toLowerCase","unshift","join","AddAPlant","scientific","season","file","loading","setLoading","console","log","className","onSubmit","e","preventDefault","fileName","sluggify","plantImageTask","child","put","on","snapshot","progress","bytesTransferred","totalBytes","state","TaskState","PAUSED","RUNNING","error","getDownloadURL","then","downloadURL","plantObject","fileUrl","push","htmlFor","onChange","target","value","type","id","files","image","Blob","usePlantList","plantList","setPlantList","useEffect","data","val","newPlantList","key","PlantList","map","plantSpec","src","alt","App","role","aria-label","logo","width","height","aria-expanded","data-target","aria-hidden","to","path","component","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.642b7ea7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plant2.f212b86f.svg\";","import firebase from 'firebase/app'\nimport 'firebase/database'\nimport 'firebase/storage'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAYeCkXgxcm9jbgD2N46fRr4RAOMskqjvs\",\n    authDomain: \"edible-plants.firebaseapp.com\",\n    databaseURL: \"https://edible-plants.firebaseio.com\",\n    projectId: \"edible-plants\",\n    storageBucket: \"edible-plants.appspot.com\",\n    messagingSenderId: \"876085718936\",\n    appId: \"1:876085718936:web:787a950809e90a19d185ed\"\n};\n\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  export const storageRef = firebase.storage().ref();\n  export const dbRef = firebase.database().ref();\n\n\nexport default firebase;","import {useState} from 'react'\n\nconst useUserInputTracking = (pieceOState) => {\n    const [userInput, setUserInput] = useState('')\n\n    const handleUserInput = (newInput) => {\n        // console.log('hello')\n        setUserInput(newInput)\n    }\n    return {\n        userInput,\n        setUserInput,\n        handleUserInput\n    }\n}\n\nexport default useUserInputTracking;","\nexport default (name) => {\n    //remove spaces and special characters\n    const noSpaces = name.replace(/[^\\w]/gi, '').split('');\n    //remove first capital and make it lowercase\n    const firstLetter = noSpaces.shift().toLowerCase();\n    //add lowercase back onto letter array\n    noSpaces.unshift(firstLetter);\n    const slug = noSpaces.join('');\n    return slug;\n}","import React, {useState} from 'react'\nimport firebase, { dbRef, storageRef } from '../firebase'\n\nimport useUserInputTracking from '../hooks/useUserInputTracking'\nimport sluggify from '../helpers/sluggify'\n\nfunction AddAPlant(){\n    const name = useUserInputTracking('name');\n    const scientific = useUserInputTracking('scientific');\n    const season = useUserInputTracking('season');\n    const file = useUserInputTracking('file');\n\n    const [loading, setLoading] = useState(false)\n        \n    const sendInfoToFirebase = (e) => {\n        e.preventDefault();\n        const fileName = sluggify(name.userInput)\n        const plantImageTask = storageRef.child(`${fileName}.jpg`).put(file.userInput);\n        plantImageTask.on('state_changed', function (snapshot) {\n            // Observe state change events such as progress, pause, and resume\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            setLoading(true)\n            if (progress === 100){\n                setLoading(false)\n            }\n            console.log('Upload is '+ progress + '% done');\n            switch (snapshot.state) {\n                case firebase.storage.TaskState.PAUSED: // or 'paused'\n                    // console.log('Upload is paused');\n                    break;\n                case firebase.storage.TaskState.RUNNING: // or 'running'\n                    // console.log('Upload is running');\n                    break;\n            }\n        }, function (error) {\n            // Handle unsuccessful uploads\n            console.log(error)\n        }, function () {\n            // Handle successful uploads on complete\n            plantImageTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n                const plantObject = {}\n                plantObject.name = name.userInput;\n                plantObject.scientific = scientific.userInput;\n                plantObject.fileUrl = downloadURL;\n                dbRef.push(plantObject);\n            });\n        });\n    }\n    const handleFileInput = (e) => {\n        console.log(e.target.files[0])\n        const image = new Blob([e.target.files[0]], { type: 'image/jpg' })\n        file.handleUserInput(image);\n    }\n    console.log(loading)\n    return(\n        <section className=\"section\">\n            <div className=\"container\">\n                <form onSubmit={sendInfoToFirebase}>\n                    <fieldset className=\"field\">\n                        <label className=\"label\" htmlFor=\"name\">Plant Name</label>\n                        <div className=\"control\">\n                            <input className=\"input\" onChange={(e) => name.handleUserInput(e.target.value)} type=\"text\" name=\"name\" id=\"name\" value={name.userInput}/>\n                        </div>\n                    </fieldset>\n                    <fieldset className=\"field\">\n                        <label className=\"label\" htmlFor=\"scientific\">Scientific Name</label>\n                        <div className=\"control\">\n                            <input className=\"input\" onChange={(e) => scientific.handleUserInput(e.target.value)} type=\"text\" name=\"scientific\" id=\"scientific\" value={scientific.userInput} />\n                        </div>\n                    </fieldset>\n                    <fieldset className=\"field\">\n                        <label className=\"label\" htmlFor=\"season\">Edible Seasons</label>\n                        <div className=\"control\">\n                            <input className=\"input\" onChange={(e) => season.handleUserInput(e.target.value)} type=\"text\" name=\"season\" id=\"season\" value={season.userInput} />\n                        </div>\n                    </fieldset>\n                    <fieldset className=\"field\">\n                        <label className=\"label\" htmlFor=\"photo\">Identification Photo</label>\n                        <div className=\"control\">\n                            <input className=\"input\" type=\"file\" name=\"photo\" id=\"photo\" onChange={handleFileInput}/>\n                        </div>\n                    </fieldset>\n                    <button className=\"button is-primary\" type=\"submit\" >Add Plant</button>\n                    {loading ? \"Please wait\" : null}\n                </form>\n            </div>\n        </section>\n    )\n}\n\n\nexport default AddAPlant;","import { useState, useEffect } from 'react'\nimport { dbRef } from '../firebase'\n\nfunction usePlantList(){\n    const [plantList, setPlantList] = useState([]);\n    useEffect(() => {\n        dbRef.on('value', (snapshot) => {\n            const data = snapshot.val()\n            const newPlantList = [];\n            for (let key in data) {\n                data[key].id = key;\n                newPlantList.push(data[key]);\n            }\n            setPlantList(newPlantList)\n        })\n    }, [])\n    return plantList;\n}\n\nexport default usePlantList;","import React from 'react'\nimport usePlantList from '../hooks/usePlantList'\n\nfunction PlantList (){\n    const plantList = usePlantList();\n    return(\n        <section className=\"section\">\n            <div className=\"container\">\n                <table className=\"table is-striped is-narrow is-fullwidth\">\n                    <thead>\n                        <th>Name</th>\n                        <th>Scientific Name</th>\n                        <th>Season</th>\n                        <th>Image</th>\n                    </thead>\n                    <tbody>\n                    {plantList.map((plantSpec) => {\n                        return (\n                            <tr key={plantSpec.id}>\n                                <td>{plantSpec.name}</td>\n                                <td>Lorem ipsum dolor</td>\n                                <td>Spring</td>\n                                <td><figure className=\"image is-128x128\"><img src={plantSpec.fileUrl} alt=\"\" /></figure></td>\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </table>\n            </div>\n        </section>\n    )\n}\nexport default PlantList ;","import React  from 'react'\nimport { BrowserRouter as Router, NavLink, Route } from 'react-router-dom'\nimport '../node_modules/react-bulma-components/dist/react-bulma-components.min.css';\nimport logo from './assests/plant2.svg'\n\n\nimport AddAPlant from './components/AddAPlant'\n\nimport './App.css'\nimport PlantList from './components/PlantList'\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n          <div className='container'>\n            <div className=\"navbar-brand\">\n              <div className=\"navbar-item\"><img src={logo} width=\"38\" height=\"38\" alt=\"grass logo\" />Edible Plants</div>\n              <div role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\n                <span aria-hidden=\"true\"></span>\n                <span aria-hidden=\"true\"></span>\n                <span aria-hidden=\"true\"></span>\n              </div>\n            </div>\n            <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n                <div className=\"navbar-end\">\n                  <NavLink className=\"navbar-item\" to='/plants'>Plant List</NavLink>\n                  <NavLink className=\"navbar-item\" to='/addPlants'>Add a Plant</NavLink>\n                </div>\n            </div>\n          </div>\n        </nav>\n        <section className=\"hero is-primary is-medium is-bold\">\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <h1 className=\"title\">\n                Edible Plants\n              </h1>\n              <h2 className=\"subtitle\">\n                by Anthony and Suzette\n              </h2>\n            </div>\n          </div>\n        </section>\n        <Route path=\"/plants\" component={PlantList}/>\n        <Route path=\"/addPlants\" component={AddAPlant} />\n        {/* <Route path=\"/wishlist\" component={WishList} /> */}\n        <footer class=\"footer\">\n          <div class=\"content has-text-centered\">\n            <p>{`Made with <3`}</p>\n          </div>\n        </footer>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}