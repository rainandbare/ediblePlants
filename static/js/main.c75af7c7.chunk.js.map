{"version":3,"sources":["assests/plant2.svg","firebase.js","hooks/useUserInputTracking.js","helpers/sluggify.js","components/AddAPlant.js","components/Description.js","components/Plant.js","components/PlantList.js","hooks/usePlantList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storageRef","storage","ref","dbRef","database","useUserInputTracking","pieceOState","useState","userInput","setUserInput","handleUserInput","newInput","name","noSpaces","replace","split","firstLetter","shift","toLowerCase","unshift","join","AddAPlant","scientific","season","file","EditorState","createEmpty","editorState","setEditorState","editor","useRef","focusEditor","current","focus","useEffect","loading","setLoading","className","onSubmit","e","preventDefault","fileName","sluggify","rawContentState","convertToRaw","getCurrentContent","notes","draftToHtml","trigger","separator","plantImageTask","child","put","on","snapshot","progress","bytesTransferred","totalBytes","console","log","state","TaskState","PAUSED","RUNNING","error","getDownloadURL","then","downloadURL","plantObject","fileUrl","push","htmlFor","onChange","target","value","type","id","files","image","Blob","onClick","Description","href","SinglePlant","props","plantData","setPlantData","once","data","val","match","params","sanitizeHtml","dangerouslySetInnerHTML","__html","src","alt","PlantList","plantList","map","plantSpec","history","key","usePlantList","setPlantList","newPlantList","App","role","aria-label","logo","width","height","aria-expanded","data-target","aria-hidden","to","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c75af7c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plant2.f212b86f.svg\";","import firebase from 'firebase/app'\nimport 'firebase/database'\nimport 'firebase/storage'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAYeCkXgxcm9jbgD2N46fRr4RAOMskqjvs\",\n    authDomain: \"edible-plants.firebaseapp.com\",\n    databaseURL: \"https://edible-plants.firebaseio.com\",\n    projectId: \"edible-plants\",\n    storageBucket: \"edible-plants.appspot.com\",\n    messagingSenderId: \"876085718936\",\n    appId: \"1:876085718936:web:787a950809e90a19d185ed\"\n};\n\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  export const storageRef = firebase.storage().ref();\n  export const dbRef = firebase.database().ref();\n\n\nexport default firebase;","import {useState} from 'react'\n\nconst useUserInputTracking = (pieceOState) => {\n    const [userInput, setUserInput] = useState('')\n\n    const handleUserInput = (newInput) => {\n        // console.log('hello')\n        setUserInput(newInput)\n    }\n    return {\n        userInput,\n        setUserInput,\n        handleUserInput\n    }\n}\n\nexport default useUserInputTracking;","\nexport default (name) => {\n    //remove spaces and special characters\n    const noSpaces = name.replace(/[^\\w]/gi, '').split('');\n    //remove first capital and make it lowercase\n    const firstLetter = noSpaces.shift().toLowerCase();\n    //add lowercase back onto letter array\n    noSpaces.unshift(firstLetter);\n    const slug = noSpaces.join('');\n    return slug;\n}","import React, {useState, useRef, useEffect} from 'react'\n\n\nimport firebase, { dbRef, storageRef } from '../firebase'\nimport useUserInputTracking from '../hooks/useUserInputTracking'\nimport sluggify from '../helpers/sluggify'\nimport { Editor, EditorState, convertToRaw} from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\n\n\nfunction AddAPlant(){\n    const name = useUserInputTracking('name');\n    const scientific = useUserInputTracking('scientific');\n    const season = useUserInputTracking('season');\n    const file = useUserInputTracking('file');\n    const [editorState, setEditorState] = useState(\n        EditorState.createEmpty()\n    );\n    const editor = useRef(null);\n    \n    const focusEditor = () =>{\n        editor.current.focus();\n    }\n    useEffect(() => {\n        focusEditor()\n    }, []);\n\n    const [loading, setLoading] = useState(false)\n        \n    const sendInfoToFirebase = (e) => {\n        e.preventDefault();\n        const fileName = sluggify(name.userInput)\n        const rawContentState = convertToRaw(editorState.getCurrentContent());\n        const hashtagConfig = {\n            trigger: '#',\n            separator: ' ',\n        }\n        const notes = draftToHtml(\n            rawContentState,\n            hashtagConfig,\n        );\n        // console.log(markup)\n        const plantImageTask = storageRef.child(`${fileName}.jpg`).put(file.userInput);\n        plantImageTask.on('state_changed', function (snapshot) {\n            // Observe state change events such as progress, pause, and resume\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            setLoading(true)\n            if (progress === 100){\n                setLoading(false)\n            }\n            console.log('Upload is '+ progress + '% done');\n            switch (snapshot.state) {\n                case firebase.storage.TaskState.PAUSED: // or 'paused'\n                    // console.log('Upload is paused');\n                    break;\n                case firebase.storage.TaskState.RUNNING: // or 'running'\n                    // console.log('Upload is running');\n                    break;\n            }\n        }, function (error) {\n            // Handle unsuccessful uploads\n            console.log(error)\n        }, function () {\n            // Handle successful uploads on complete\n            plantImageTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n                const plantObject = {}\n                plantObject.name = name.userInput;\n                plantObject.season = season.userInput;\n                plantObject.scientific = scientific.userInput;\n                plantObject.fileUrl = downloadURL;\n                plantObject.notes = notes;\n                dbRef.push(plantObject);\n            });\n        });\n    }\n    const handleFileInput = (e) => {\n        console.log(e.target.files[0])\n        const image = new Blob([e.target.files[0]], { type: 'image/jpg' })\n        file.handleUserInput(image);\n    }\n    // console.log(editorState)\n    return(\n        <section className=\"section\">\n            <div className=\"container\">\n                <form onSubmit={sendInfoToFirebase}>\n                    <fieldset className=\"field\">\n                        <label className=\"label\" htmlFor=\"name\">Plant Name</label>\n                        <div className=\"control\">\n                            <input className=\"input\" onChange={(e) => name.handleUserInput(e.target.value)} type=\"text\" name=\"name\" id=\"name\" value={name.userInput}/>\n                        </div>\n                    </fieldset>\n                    <fieldset className=\"field\">\n                        <label className=\"label\" htmlFor=\"scientific\">Scientific Name</label>\n                        <div className=\"control\">\n                            <input className=\"input\" onChange={(e) => scientific.handleUserInput(e.target.value)} type=\"text\" name=\"scientific\" id=\"scientific\" value={scientific.userInput} />\n                        </div>\n                    </fieldset>\n                    <fieldset className=\"field\">\n                        <label className=\"label\" htmlFor=\"season\">Edible Seasons</label>\n                        <div className=\"control\">\n                            <input className=\"input\" onChange={(e) => season.handleUserInput(e.target.value)} type=\"text\" name=\"season\" id=\"season\" value={season.userInput} />\n                        </div>\n                    </fieldset>\n                    <fieldset className=\"field\">\n                        <label className=\"label\" htmlFor=\"photo\">Identification Photo</label>\n                        <div className=\"control\">\n                            <input className=\"input\" type=\"file\" name=\"photo\" id=\"photo\" onChange={handleFileInput}/>\n                        </div>\n                    </fieldset>\n                    <fieldset className=\"field\">\n                        <label className=\"label\" htmlFor=\"notes\">Notes</label>\n                        <div className=\"control\">\n                            <div className=\"textarea has-fixed-size\" onClick={focusEditor}>\n                                <Editor\n                                    ref={editor}\n                                    editorState={editorState}\n                                    onChange={editorState => setEditorState(editorState)}\n                                />\n                            </div>\n                        </div>\n                    </fieldset>\n                    <button className=\"button is-primary\" type=\"submit\" >Add Plant</button>\n                    {loading ? \"Please wait\" : null}\n                </form>\n            </div>\n        </section>\n    )\n}\n\n\nexport default AddAPlant;","import React from 'react'\nfunction Description (){\n    return (\n        <section className=\"section\">\n        <div className= 'container'>\n                <p className=\"content\"> This is a place for Anthony to record his findings about edible plants on his travels. The idea is that he will be able to record the plants that are easy or difficult to find, delicious or disgusting to eat.</p>\n                <p className=\"content\"> Once we have developed a database, we will export the data and decide what the best way to present the information is. </p>\n                <p className=\"content\"> This app is a work in progress as well! If you have a suggestion for how it could be more useful or better formatted -- go to the github <a href=\"https://github.com/rainandbare/ediblePlants/issues\">Issues List</a> and submit an issue for review. </p>\n                <div className=\"content extraSpace\">\n                    <p>\n                        ♥️ to you,\n                    </p>\n                    <p>\n                        - Suzette\n                    </p>\n            </div> \n        </div>\n        </section>\n    )\n}\nexport default Description;","import React, {useEffect, useState} from 'react'\nimport { dbRef } from '../firebase'\nimport sanitizeHtml from 'sanitize-html'\n\n\nfunction SinglePlant(props){\n    const [plantData, setPlantData] = useState({notes: ''})\n    useEffect(() => {\n        dbRef.once('value', (snapshot) => {\n            const data = snapshot.val()\n            setPlantData(data[props.match.params.id])\n        })\n    }, [props.match.params.id])\n    function createMarkup() {\n        return { __html: sanitizeHtml(plantData.notes) };\n    }\n    console.log(sanitizeHtml(plantData.notes))\n    return(\n            <section className=\"section\">\n                <div className=\"container\">\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <h1 className=\"title\">{plantData.name}</h1>\n                        <div className=\"notes\"      dangerouslySetInnerHTML={createMarkup()}></div>\n                        </div>\n                        <div className=\"column\">\n                            <img src={plantData.fileUrl} alt=\"\"/>\n                        </div>\n\n                    </div>\n\n                </div>\n            </section>\n        )\n}\n\nexport default SinglePlant;","import React from 'react'\n\nfunction PlantList (props){\n    const takeMeThere = (id) => {\n        props.history.push(`/plant/${id}`)\n    }\n    return(\n        <section className=\"section\">\n            <div className=\"container\">\n                <table className=\"table is-striped is-narrow is-fullwidth is-hoverable\">\n                    <thead>\n                        <th>Name</th>\n                        <th>Scientific Name</th>\n                        <th>Season</th>\n                        <th>Image</th>\n                    </thead>\n                    <tbody>\n                    {props.plantList.map((plantSpec) => {\n                        return (\n                            <tr onClick={() => takeMeThere(plantSpec.id)} key={plantSpec.id}>\n                                <td>{plantSpec.name}</td>\n                                <td>{plantSpec.scientific}</td>\n                                <td>{plantSpec.season}</td>\n                                <td><figure className=\"image is-128x128\"><img src={plantSpec.fileUrl} alt=\"\" /></figure></td>\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </table>\n            </div>\n        </section>\n    )\n}\nexport default PlantList ;","import { useState, useEffect } from 'react'\nimport { dbRef } from '../firebase'\n\nfunction usePlantList(){\n    const [plantList, setPlantList] = useState([]);\n    useEffect(() => {\n        dbRef.on('value', (snapshot) => {\n            const data = snapshot.val()\n            const newPlantList = [];\n            for (let key in data) {\n                data[key].id = key;\n                newPlantList.push(data[key]);\n            }\n            setPlantList(newPlantList)\n        })\n    }, [])\n    return plantList;\n}\n\nexport default usePlantList;","import React  from 'react'\nimport { BrowserRouter as Router, NavLink, Route } from 'react-router-dom'\nimport '../node_modules/react-bulma-components/dist/react-bulma-components.min.css';\nimport logo from './assests/plant2.svg'\n\n\nimport AddAPlant from './components/AddAPlant'\nimport Description from './components/Description'\nimport SinglePlant from './components/Plant'\n\nimport './App.css'\nimport PlantList from './components/PlantList'\n\nimport usePlantList from './hooks/usePlantList'\n\n\nfunction App() {\n  const plantList = usePlantList();\n\n  return (\n    <Router>\n      <div>\n        <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n          <div className='container'>\n            <div className=\"navbar-brand\">\n              <div className=\"navbar-item\"><img src={logo} width=\"38\" height=\"38\" alt=\"grass logo\" />Edible Plants</div>\n              <div role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\n                <span aria-hidden=\"true\"></span>\n                <span aria-hidden=\"true\"></span>\n                <span aria-hidden=\"true\"></span>\n              </div>\n            </div>\n            <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n                <div className=\"navbar-end\">\n                  <NavLink className=\"navbar-item\" to='/plants'>Plant List</NavLink>\n                  <NavLink className=\"navbar-item\" to='/addPlants'>Add a Plant</NavLink>\n                  <a className=\"navbar-item\" href=\"https://github.com/rainandbare/ediblePlants/issues\">Wish List</a>\n                </div>\n            </div>\n          </div>\n        </nav>\n        <section className=\"hero is-primary is-medium is-bold\">\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <h1 className=\"title\">\n                Edible Plants\n              </h1>\n              <h2 className=\"subtitle\">\n                by Anthony and Suzette\n              </h2>\n            </div>\n          </div>\n        </section>\n        <Route exact path=\"/\" component={Description} />\n        <Route path=\"/plants\" render={(props) => <PlantList {...props} plantList={plantList}/>}/>\n        <Route path=\"/addPlants\" component={AddAPlant} />\n        <Route path=\"/plant/:id\" component={SinglePlant}/>\n        <footer className=\"footer\">\n          <div className=\"content has-text-centered\">\n            <p>{`Made with <3`}</p>\n          </div>\n        </footer>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}